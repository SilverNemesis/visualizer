{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","data","i","push","state","running","drawBars","bind","shuffleAction","reverseAction","bubbleSortAction","insertionSortAction","mergeSortAction","quickSortAction","window","requestAnimationFrame","this","clearInterval","timer","Promise","res","setTimeout","j","t","done","n","length","swap","Math","floor","random","task","count","key","sort","l","r","a","async","m","merge","start","mid","end","start2","value","index","partition","low","high","pivot","setState","shuffle","reverse","bubbleSort","insertionSort","mergeSort","quickSort","rect","canvas","getBoundingClientRect","w","width","h","height","step","barWidth","ctx","getContext","lineWidth","clearRect","fillStyle","barHeight","fillRect","Fragment","className","ref","elem","type","disabled","onClick","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QA2PeA,E,YAxPb,WAAYC,GAAQ,IAAD,sBACjB,4CAAMA,IAEN,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAAI,IAAKA,IACvBD,EAAKE,KAAKD,GAJK,OAMjB,EAAKE,MAAQ,CACXC,SAAS,GAEX,EAAKJ,KAAOA,EACZ,EAAKK,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBACrB,EAAKG,iBAAmB,EAAKA,iBAAiBH,KAAtB,gBACxB,EAAKI,oBAAsB,EAAKA,oBAAoBJ,KAAzB,gBAC3B,EAAKK,gBAAkB,EAAKA,gBAAgBL,KAArB,gBACvB,EAAKM,gBAAkB,EAAKA,gBAAgBN,KAArB,gBAhBN,E,iFAoBjBO,OAAOC,sBAAsBC,KAAKV,Y,6CAIlCW,cAAcD,KAAKE,S,2BAGVhB,G,4FACH,IAAIiB,SAAQ,SAAAC,GAAG,OAAIC,WAAWD,EAAK,O,kEAGtCnB,EAAMC,EAAGoB,GACZ,IAAMC,EAAItB,EAAKC,GACfD,EAAKC,GAAKD,EAAKqB,GACfrB,EAAKqB,GAAKC,I,8BAGEC,G,4EACNvB,EAAOe,KAAKf,KACZwB,EAAIxB,EAAKyB,OACNxB,EAAIuB,EAAI,E,YAAGvB,GAAK,G,wBACvBc,KAAKW,KAAK1B,EAAMC,EAAG0B,KAAKC,MAAMD,KAAKE,SAAW5B,I,mBACxCc,KAAKe,Q,OAFe7B,I,uBAI5BsB,I,gFAGYA,G,4EACNvB,EAAOe,KAAKf,KACZwB,EAAIxB,EAAKyB,OACNxB,EAAI,E,YAAGA,EAAIuB,EAAI,G,wBACtBT,KAAKW,KAAK1B,EAAMC,EAAGuB,EAAIvB,EAAI,G,mBACrBc,KAAKe,Q,OAFc7B,I,uBAI3BsB,I,mFAGeA,G,gFACTvB,EAAOe,KAAKf,KACZwB,EAAIxB,EAAKyB,OAAS,EACfxB,EAAI,E,YAAGA,EAAIuB,G,iBACdO,EAAQ,EACHV,EAAI,E,YAAGA,EAAIG,EAAIvB,G,wBAClBD,EAAKqB,GAAKrB,EAAKqB,EAAI,KACrBN,KAAKW,KAAK1B,EAAMqB,EAAGA,EAAI,GACvBU,K,oBAEIhB,KAAKe,Q,QALcT,I,0BAOb,IAAVU,E,qDATiB9B,I,uBAavBsB,I,sFAGkBA,G,gFACZvB,EAAOe,KAAKf,KACZwB,EAAIxB,EAAKyB,OACNxB,EAAI,E,YAAGA,EAAIuB,G,iBACZQ,EAAMhC,EAAKC,GACboB,EAAIpB,EAAI,E,YACLoB,GAAK,GAAKrB,EAAKqB,GAAKW,G,wBACzBhC,EAAKqB,EAAI,GAAKrB,EAAKqB,GACnBA,GAAQ,E,oBACFN,KAAKe,Q,+BAEb9B,EAAKqB,EAAI,GAAKW,E,QARO/B,I,uBAUvBsB,I,kFAGcA,G,wFACRU,EAAO,SAAPA,EAAcjC,EAAMkC,EAAGC,GAAhB,eAAAC,EAAAC,OAAA,qDACPH,EAAIC,GADG,uBAEHG,EAAIX,KAAKC,MAAMM,GAAKC,EAAID,GAAK,GAF1B,WAAAE,EAAA,MAGHH,EAAKjC,EAAMkC,EAAGI,IAHX,yBAAAF,EAAA,MAIHH,EAAKjC,EAAMsC,EAAI,EAAGH,IAJf,yBAAAC,EAAA,MAKHG,EAAMvC,EAAMkC,EAAGI,EAAGH,IALf,sCAQPI,EAAQ,SAAOvC,EAAMwC,EAAOC,EAAKC,GAAzB,mBAAAN,EAAAC,OAAA,mDACRM,EAASF,EAAM,IACfzC,EAAKyC,IAAQzC,EAAK2C,IAFV,sDAKLH,GAASC,GAAOE,GAAUD,GALrB,sBAMN1C,EAAKwC,IAAUxC,EAAK2C,IANd,gBAORH,IAPQ,uBAUFI,EAAQ5C,EAAK2C,GACfE,EAAQF,EAXJ,WAYDE,IAAUL,EAZT,wBAaNxC,EAAK6C,GAAS7C,EAAK6C,EAAQ,GAbrB,YAAAT,EAAA,MAcA,EAAKN,QAdL,QAeNe,IAfM,+BAiBR7C,EAAKwC,GAASI,EAjBN,YAAAR,EAAA,MAkBF,EAAKN,QAlBH,QAmBRU,IACAC,IACAE,IArBQ,8D,mBAyBRV,EAAKlB,KAAKf,KAAM,EAAGe,KAAKf,KAAKyB,OAAS,I,OAC5CF,I,iFAGcA,G,wFACRuB,EAAY,SAAO9C,EAAM+C,EAAKC,GAAlB,qBAAAZ,EAAAC,OAAA,qDACZW,EAAOD,EAAM,GADD,uBAERN,EAAMd,KAAKC,MAAMmB,GAAOC,EAAOD,GAAO,GACxC/C,EAAK+C,GAAO/C,EAAKyC,IAAQzC,EAAKyC,GAAOzC,EAAKgD,GAC5C,EAAKtB,KAAK1B,EAAMyC,EAAKO,GAEdhD,EAAK+C,GAAO/C,EAAKyC,IAAQzC,EAAKyC,GAAOzC,EAAKgD,IACjD,EAAKtB,KAAK1B,EAAMyC,EAAKO,GAPT,WAAAZ,EAAA,MASR,EAAKN,QATG,OAWVmB,EAAQjD,EAAKgD,GACf/C,EAAK8C,EAAM,EACN1B,EAAI0B,EAbG,YAaE1B,GAAK2B,EAAO,GAbd,sBAcVhD,EAAKqB,GAAK4B,GAdA,wBAeZhD,IACA,EAAKyB,KAAK1B,EAAMC,EAAGoB,GAhBP,YAAAe,EAAA,MAiBN,EAAKN,QAjBC,QAaiBT,IAbjB,8BAoBhB,EAAKK,KAAK1B,EAAMC,EAAI,EAAG+C,GApBP,YAAAZ,EAAA,MAqBV,EAAKN,QArBK,iCAsBR7B,EAAI,GAtBI,uCAwBZgC,EAAO,SAAPA,EAAcjC,EAAM+C,EAAKC,GAAlB,eAAAZ,EAAAC,OAAA,qDACPU,EAAMC,GADC,kCAAAZ,EAAA,MAESU,EAAU9C,EAAM+C,EAAKC,IAF9B,cAEHP,EAFG,kBAAAL,EAAA,MAGHH,EAAKjC,EAAM+C,EAAKN,EAAM,IAHnB,yBAAAL,EAAA,MAIHH,EAAKjC,EAAMyC,EAAM,EAAGO,IAJjB,sC,mBAOPf,EAAKlB,KAAKf,KAAM,EAAGe,KAAKf,KAAKyB,OAAS,I,OAC5CF,I,uFAGe,IAAD,OACdR,KAAKmC,SAAS,CAAE9C,SAAS,IAAQ,WAC/B,EAAK+C,SAAQ,kBAAM,EAAKD,SAAS,CAAE9C,SAAS,Y,sCAI/B,IAAD,OACdW,KAAKmC,SAAS,CAAE9C,SAAS,IAAQ,WAC/B,EAAKgD,SAAQ,kBAAM,EAAKF,SAAS,CAAE9C,SAAS,Y,yCAI5B,IAAD,OACjBW,KAAKmC,SAAS,CAAE9C,SAAS,IAAQ,WAC/B,EAAKiD,YAAW,kBAAM,EAAKH,SAAS,CAAE9C,SAAS,Y,4CAI5B,IAAD,OACpBW,KAAKmC,SAAS,CAAE9C,SAAS,IAAQ,WAC/B,EAAKkD,eAAc,kBAAM,EAAKJ,SAAS,CAAE9C,SAAS,Y,wCAInC,IAAD,OAChBW,KAAKmC,SAAS,CAAE9C,SAAS,IAAQ,WAC/B,EAAKmD,WAAU,kBAAM,EAAKL,SAAS,CAAE9C,SAAS,Y,wCAI/B,IAAD,OAChBW,KAAKmC,SAAS,CAAE9C,SAAS,IAAQ,WAC/B,EAAKoD,WAAU,kBAAM,EAAKN,SAAS,CAAE9C,SAAS,Y,iCAKhD,IAAMJ,EAAOe,KAAKf,KACZwB,EAAIxB,EAAKyB,OACTgC,EAAO1C,KAAK2C,OAAOC,wBACnBC,EAAIH,EAAKI,MACTC,EAAIL,EAAKM,OACfhD,KAAK2C,OAAOG,MAAQD,EACpB7C,KAAK2C,OAAOK,OAASD,EACrB,IAAME,EAAOrC,KAAKC,MAAMgC,EAAIpC,GACtByC,EAAWtC,KAAKC,MAAa,GAAPoC,GACtBE,EAAMnD,KAAK2C,OAAOS,WAAW,MACnCD,EAAIE,UAAY,EAChBF,EAAIG,UAAU,EAAG,EAAGT,EAAGE,GACvBI,EAAII,UAAY,QAChB,IAAK,IAAIrE,EAAI,EAAGA,EAAIuB,EAAGvB,IAAK,CAC1B,IAAMsE,EAAY5C,KAAKC,MAAM5B,EAAKC,GAAK,IAAM,GAAK6D,GAClDI,EAAIM,SAASvE,EAAI+D,EAAMF,EAAIS,EAAWN,EAAUM,GAElD1D,OAAOC,sBAAsBC,KAAKV,Y,+BAG1B,IAAD,OACP,OACE,kBAAC,IAAMoE,SAAP,KACE,yBAAKC,UAAU,0BACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,eACb,4BAAQA,UAAU,SAASC,IAAK,SAAAC,GAAI,OAAI,EAAKlB,OAASkB,OAG1D,yBAAKF,UAAU,YACb,yBAAKA,UAAU,2DACb,4BAAQG,KAAK,SAASH,UAAU,yBAAyBI,SAAU/D,KAAKZ,MAAMC,QAAS2E,QAAShE,KAAKR,eAArG,WACA,4BAAQsE,KAAK,SAASH,UAAU,yBAAyBI,SAAU/D,KAAKZ,MAAMC,QAAS2E,QAAShE,KAAKP,eAArG,WACA,4BAAQqE,KAAK,SAASH,UAAU,yBAAyBI,SAAU/D,KAAKZ,MAAMC,QAAS2E,QAAShE,KAAKN,kBAArG,eACA,4BAAQoE,KAAK,SAASH,UAAU,yBAAyBI,SAAU/D,KAAKZ,MAAMC,QAAS2E,QAAShE,KAAKL,qBAArG,kBACA,4BAAQmE,KAAK,SAASH,UAAU,yBAAyBI,SAAU/D,KAAKZ,MAAMC,QAAS2E,QAAShE,KAAKJ,iBAArG,cACA,4BAAQkE,KAAK,SAASH,UAAU,yBAAyBI,SAAU/D,KAAKZ,MAAMC,QAAS2E,QAAShE,KAAKH,iBAArG,sB,GAhPIoE,IAAMC,WCUJC,QACW,cAA7BrE,OAAOsE,SAASC,UAEe,UAA7BvE,OAAOsE,SAASC,UAEhBvE,OAAOsE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.20600884.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const data = [];\r\n    for (let i = 0; i < 100; i++) {\r\n      data.push(i);\r\n    }\r\n    this.state = {\r\n      running: false\r\n    };\r\n    this.data = data;\r\n    this.drawBars = this.drawBars.bind(this);\r\n    this.shuffleAction = this.shuffleAction.bind(this);\r\n    this.reverseAction = this.reverseAction.bind(this);\r\n    this.bubbleSortAction = this.bubbleSortAction.bind(this);\r\n    this.insertionSortAction = this.insertionSortAction.bind(this);\r\n    this.mergeSortAction = this.mergeSortAction.bind(this);\r\n    this.quickSortAction = this.quickSortAction.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.requestAnimationFrame(this.drawBars);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n\r\n  async task(i) {\r\n    await new Promise(res => setTimeout(res, 1));\r\n  }\r\n\r\n  swap(data, i, j) {\r\n    const t = data[i];\r\n    data[i] = data[j];\r\n    data[j] = t;\r\n  }\r\n\r\n  async shuffle(done) {\r\n    const data = this.data;\r\n    const n = data.length;\r\n    for (let i = n - 1; i >= 0; i--) {\r\n      this.swap(data, i, Math.floor(Math.random() * i));\r\n      await this.task();\r\n    }\r\n    done();\r\n  }\r\n\r\n  async reverse(done) {\r\n    const data = this.data;\r\n    const n = data.length;\r\n    for (let i = 0; i < n / 2; i++) {\r\n      this.swap(data, i, n - i - 1);\r\n      await this.task();\r\n    }\r\n    done();\r\n  }\r\n\r\n  async bubbleSort(done) {\r\n    const data = this.data;\r\n    const n = data.length - 1;\r\n    for (let i = 0; i < n; i++) {\r\n      let count = 0;\r\n      for (let j = 0; j < n - i; j++) {\r\n        if (data[j] > data[j + 1]) {\r\n          this.swap(data, j, j + 1);\r\n          count++;\r\n        }\r\n        await this.task();\r\n      }\r\n      if (count === 0) {\r\n        break;\r\n      }\r\n    }\r\n    done();\r\n  }\r\n\r\n  async insertionSort(done) {\r\n    const data = this.data;\r\n    const n = data.length;\r\n    for (let i = 1; i < n; i++) {\r\n      const key = data[i];\r\n      let j = i - 1;\r\n      while (j >= 0 && data[j] > key) {\r\n        data[j + 1] = data[j];\r\n        j = j - 1;\r\n        await this.task();\r\n      }\r\n      data[j + 1] = key;\r\n    }\r\n    done();\r\n  }\r\n\r\n  async mergeSort(done) {\r\n    const sort = async (data, l, r) => {\r\n      if (l < r) {\r\n        const m = Math.floor(l + (r - l) / 2);\r\n        await sort(data, l, m);\r\n        await sort(data, m + 1, r);\r\n        await merge(data, l, m, r);\r\n      }\r\n    }\r\n    const merge = async (data, start, mid, end) => {\r\n      let start2 = mid + 1;\r\n      if (data[mid] <= data[start2]) {\r\n        return;\r\n      }\r\n      while (start <= mid && start2 <= end) {\r\n        if (data[start] <= data[start2]) {\r\n          start++;\r\n        }\r\n        else {\r\n          const value = data[start2];\r\n          let index = start2;\r\n          while (index !== start) {\r\n            data[index] = data[index - 1];\r\n            await this.task();\r\n            index--;\r\n          }\r\n          data[start] = value;\r\n          await this.task();\r\n          start++;\r\n          mid++;\r\n          start2++;\r\n        }\r\n      }\r\n    }\r\n    await sort(this.data, 0, this.data.length - 1);\r\n    done();\r\n  }\r\n\r\n  async quickSort(done) {\r\n    const partition = async (data, low, high) => {\r\n      if (high - low > 2) {\r\n        const mid = Math.floor(low + (high - low) / 2);\r\n        if (data[low] < data[mid] && data[mid] < data[high]) {\r\n          this.swap(data, mid, high);\r\n        }\r\n        else if (data[low] > data[mid] && data[mid] > data[high]) {\r\n          this.swap(data, mid, high);\r\n        }\r\n        await this.task();\r\n      }\r\n      const pivot = data[high];\r\n      let i = (low - 1);\r\n      for (let j = low; j <= high - 1; j++) {\r\n        if (data[j] < pivot) {\r\n          i++;\r\n          this.swap(data, i, j);\r\n          await this.task();\r\n        }\r\n      }\r\n      this.swap(data, i + 1, high);\r\n      await this.task();\r\n      return (i + 1);\r\n    }\r\n    const sort = async (data, low, high) => {\r\n      if (low < high) {\r\n        const mid = await partition(data, low, high);\r\n        await sort(data, low, mid - 1);\r\n        await sort(data, mid + 1, high);\r\n      }\r\n    }\r\n    await sort(this.data, 0, this.data.length - 1);\r\n    done();\r\n  }\r\n\r\n  shuffleAction() {\r\n    this.setState({ running: true }, () => {\r\n      this.shuffle(() => this.setState({ running: false }));\r\n    });\r\n  }\r\n\r\n  reverseAction() {\r\n    this.setState({ running: true }, () => {\r\n      this.reverse(() => this.setState({ running: false }));\r\n    });\r\n  }\r\n\r\n  bubbleSortAction() {\r\n    this.setState({ running: true }, () => {\r\n      this.bubbleSort(() => this.setState({ running: false }));\r\n    });\r\n  }\r\n\r\n  insertionSortAction() {\r\n    this.setState({ running: true }, () => {\r\n      this.insertionSort(() => this.setState({ running: false }));\r\n    });\r\n  }\r\n\r\n  mergeSortAction() {\r\n    this.setState({ running: true }, () => {\r\n      this.mergeSort(() => this.setState({ running: false }));\r\n    });\r\n  }\r\n\r\n  quickSortAction() {\r\n    this.setState({ running: true }, () => {\r\n      this.quickSort(() => this.setState({ running: false }));\r\n    });\r\n  }\r\n\r\n  drawBars() {\r\n    const data = this.data;\r\n    const n = data.length;\r\n    const rect = this.canvas.getBoundingClientRect()\r\n    const w = rect.width;\r\n    const h = rect.height;\r\n    this.canvas.width = w;\r\n    this.canvas.height = h;\r\n    const step = Math.floor(w / n);\r\n    const barWidth = Math.floor(step * .8);\r\n    const ctx = this.canvas.getContext('2d');\r\n    ctx.lineWidth = 1;\r\n    ctx.clearRect(0, 0, w, h);\r\n    ctx.fillStyle = 'black'\r\n    for (let i = 0; i < n; i++) {\r\n      const barHeight = Math.floor(data[i] / 100 * .8 * h);\r\n      ctx.fillRect(i * step, h - barHeight, barWidth, barHeight);\r\n    }\r\n    window.requestAnimationFrame(this.drawBars);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"container-fluid screen\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm case\">\r\n              <canvas className=\"canvas\" ref={elem => this.canvas = elem} />\r\n            </div>\r\n          </div>\r\n          <div className=\"row h-25\">\r\n            <div className=\"col-sm d-flex justify-content-around align-items-center\">\r\n              <button type=\"button\" className=\"btn btn-primary btn-lg\" disabled={this.state.running} onClick={this.shuffleAction}>Shuffle</button>\r\n              <button type=\"button\" className=\"btn btn-primary btn-lg\" disabled={this.state.running} onClick={this.reverseAction}>Reverse</button>\r\n              <button type=\"button\" className=\"btn btn-primary btn-lg\" disabled={this.state.running} onClick={this.bubbleSortAction}>Bubble Sort</button>\r\n              <button type=\"button\" className=\"btn btn-primary btn-lg\" disabled={this.state.running} onClick={this.insertionSortAction}>Insertion Sort</button>\r\n              <button type=\"button\" className=\"btn btn-primary btn-lg\" disabled={this.state.running} onClick={this.mergeSortAction}>Merge Sort</button>\r\n              <button type=\"button\" className=\"btn btn-primary btn-lg\" disabled={this.state.running} onClick={this.quickSortAction}>Quick Sort</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}