{"version":3,"sources":["lib/Drawing.js","lib/Vector.js","App.js","serviceWorker.js","index.js"],"names":["Drawing","canvas","data","n","length","rect","getBoundingClientRect","w","width","h","height","step","Math","floor","barWidth","ctx","getContext","lineWidth","clearRect","fillStyle","i","barHeight","fillRect","Vector","j","t","update","done","this","swap","random","count","key","merge","start","mid","end","start2","value","index","sort","l","r","m","partition","low","high","pivot","a","async","App","props","push","state","running","rendering","queue","drawing","vector","bind","renderCanvas","shuffleAction","reverseAction","bubbleSortAction","insertionSortAction","mergeSortAction","quickSortAction","window","requestAnimationFrame","setState","timeStamp","undefined","shuffle","reverse","bubbleSort","insertionSort","mergeSort","quickSort","elapsed","shift","drawBars","Fragment","className","ref","elem","type","disabled","onClick","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f09b445c.chunk.js","sourcesContent":["class Drawing {\r\n  drawBars(canvas, data) {\r\n    const n = data.length;\r\n    const rect = canvas.getBoundingClientRect()\r\n    const w = rect.width;\r\n    const h = rect.height;\r\n    canvas.width = w;\r\n    canvas.height = h;\r\n    const step = Math.floor(w / n);\r\n    const barWidth = Math.floor(step * .8);\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.lineWidth = 1;\r\n    ctx.clearRect(0, 0, w, h);\r\n    ctx.fillStyle = 'black'\r\n    for (let i = 0; i < n; i++) {\r\n      const barHeight = Math.floor((data[i] + 1) / 100 * .8 * h);\r\n      ctx.fillRect(i * step, h - barHeight, barWidth, barHeight);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Drawing;\r\n","class Vector {\r\n  swap(data, i, j) {\r\n    const t = data[i];\r\n    data[i] = data[j];\r\n    data[j] = t;\r\n  }\r\n\r\n  shuffle(data, update, done) {\r\n    const n = data.length;\r\n    for (let i = n - 1; i >= 0; i--) {\r\n      this.swap(data, i, Math.floor(Math.random() * i));\r\n      update(data);\r\n    }\r\n    done();\r\n  }\r\n\r\n  reverse(data, update, done) {\r\n    const n = data.length;\r\n    for (let i = 0; i < n / 2; i++) {\r\n      this.swap(data, i, n - i - 1);\r\n      update(data);\r\n    }\r\n    done();\r\n  }\r\n\r\n  bubbleSort(data, update, done) {\r\n    const n = data.length - 1;\r\n    for (let i = 0; i < n; i++) {\r\n      let count = 0;\r\n      for (let j = 0; j < n - i; j++) {\r\n        if (data[j] > data[j + 1]) {\r\n          this.swap(data, j, j + 1);\r\n          update(data);\r\n          count++;\r\n        }\r\n      }\r\n      if (count === 0) {\r\n        break;\r\n      }\r\n    }\r\n    done();\r\n  }\r\n\r\n  insertionSort(data, update, done) {\r\n    const n = data.length;\r\n    for (let i = 1; i < n; i++) {\r\n      const key = data[i];\r\n      let j = i - 1;\r\n      while (j >= 0 && data[j] > key) {\r\n        data[j + 1] = data[j];\r\n        update(data);\r\n        j = j - 1;\r\n      }\r\n      data[j + 1] = key;\r\n      update(data);\r\n    }\r\n    done();\r\n  }\r\n\r\n  mergeSort(data, update, done) {\r\n    const sort = (data, l, r) => {\r\n      if (l < r) {\r\n        const m = Math.floor(l + (r - l) / 2);\r\n        sort(data, l, m);\r\n        sort(data, m + 1, r);\r\n        merge(data, l, m, r);\r\n      }\r\n    }\r\n    const merge = (data, start, mid, end) => {\r\n      let start2 = mid + 1;\r\n      if (data[mid] <= data[start2]) {\r\n        return;\r\n      }\r\n      while (start <= mid && start2 <= end) {\r\n        if (data[start] <= data[start2]) {\r\n          start++;\r\n        }\r\n        else {\r\n          const value = data[start2];\r\n          let index = start2;\r\n          while (index !== start) {\r\n            data[index] = data[index - 1];\r\n            update(data);\r\n            index--;\r\n          }\r\n          data[start] = value;\r\n          update(data);\r\n          start++;\r\n          mid++;\r\n          start2++;\r\n        }\r\n      }\r\n    }\r\n    sort(data, 0, data.length - 1);\r\n    done();\r\n  }\r\n\r\n  quickSort(data, update, done) {\r\n    const partition = (data, low, high) => {\r\n      if (high - low > 2) {\r\n        const mid = Math.floor(low + (high - low) / 2);\r\n        if (data[low] < data[mid] && data[mid] < data[high]) {\r\n          this.swap(data, mid, high);\r\n          update(data);\r\n        }\r\n        else if (data[low] > data[mid] && data[mid] > data[high]) {\r\n          this.swap(data, mid, high);\r\n          update(data);\r\n        }\r\n      }\r\n      const pivot = data[high];\r\n      let i = (low - 1);\r\n      for (let j = low; j <= high - 1; j++) {\r\n        if (data[j] < pivot) {\r\n          i++;\r\n          this.swap(data, i, j);\r\n          update(data);\r\n        }\r\n      }\r\n      this.swap(data, i + 1, high);\r\n      update(data);\r\n      return (i + 1);\r\n    }\r\n    const sort = async (data, low, high) => {\r\n      if (low < high) {\r\n        const mid = partition(data, low, high);\r\n        sort(data, low, mid - 1);\r\n        sort(data, mid + 1, high);\r\n      }\r\n    }\r\n    sort(data, 0, data.length - 1);\r\n    done();\r\n  }\r\n}\r\n\r\nexport default Vector;\r\n","import React from 'react';\r\nimport Drawing from './lib/Drawing'\r\nimport Vector from './lib/Vector'\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const data = [];\r\n    for (let i = 0; i < 100; i++) {\r\n      data.push(i);\r\n    }\r\n    this.state = {\r\n      running: false,\r\n      rendering: false\r\n    };\r\n    this.data = data;\r\n    this.queue = [];\r\n    this.drawing = new Drawing();\r\n    this.vector = new Vector();\r\n    this.update = this.update.bind(this)\r\n    this.done = this.done.bind(this)\r\n    this.renderCanvas = this.renderCanvas.bind(this);\r\n    this.shuffleAction = this.shuffleAction.bind(this);\r\n    this.reverseAction = this.reverseAction.bind(this);\r\n    this.bubbleSortAction = this.bubbleSortAction.bind(this);\r\n    this.insertionSortAction = this.insertionSortAction.bind(this);\r\n    this.mergeSortAction = this.mergeSortAction.bind(this);\r\n    this.quickSortAction = this.quickSortAction.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.requestAnimationFrame(this.renderCanvas);\r\n  }\r\n\r\n  update(data) {\r\n    this.queue.push([...data]);\r\n  }\r\n\r\n  done() {\r\n    this.setState({\r\n      running: false\r\n    });\r\n  }\r\n\r\n  shuffleAction() {\r\n    this.setState({ running: true, rendering: true }, () => {\r\n      this.timeStamp = undefined;\r\n      this.vector.shuffle([...this.data], this.update, this.done);\r\n    });\r\n  }\r\n\r\n  reverseAction() {\r\n    this.setState({ running: true, rendering: true }, () => {\r\n      this.timeStamp = undefined;\r\n      this.vector.reverse([...this.data], this.update, this.done);\r\n    });\r\n  }\r\n\r\n  bubbleSortAction() {\r\n    this.setState({ running: true, rendering: true }, () => {\r\n      this.timeStamp = undefined;\r\n      this.vector.bubbleSort([...this.data], this.update, this.done);\r\n    });\r\n  }\r\n\r\n  insertionSortAction() {\r\n    this.setState({ running: true, rendering: true }, () => {\r\n      this.timeStamp = undefined;\r\n      this.vector.insertionSort([...this.data], this.update, this.done);\r\n    });\r\n  }\r\n\r\n  mergeSortAction() {\r\n    this.setState({ running: true, rendering: true }, () => {\r\n      this.timeStamp = undefined;\r\n      this.vector.mergeSort([...this.data], this.update, this.done);\r\n    });\r\n  }\r\n\r\n  quickSortAction() {\r\n    this.setState({ running: true, rendering: true }, () => {\r\n      this.timeStamp = undefined;\r\n      this.vector.quickSort([...this.data], this.update, this.done);\r\n    });\r\n  }\r\n\r\n  renderCanvas(timeStamp) {\r\n    if (!this.timeStamp) {\r\n      this.timeStamp = timeStamp;\r\n    }\r\n    let elapsed = timeStamp - this.timeStamp;\r\n    this.timeStamp = timeStamp;\r\n    while (this.queue.length > 0 && elapsed >= 8) {\r\n      elapsed -= 8;\r\n      this.data = this.queue.shift();\r\n    }\r\n    this.timeStamp -= elapsed;\r\n    this.drawing.drawBars(this.canvas, this.data);\r\n    if (!this.state.running && this.queue.length === 0) {\r\n      this.setState({ rendering: false });\r\n    }\r\n    window.requestAnimationFrame(this.renderCanvas);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"container-fluid screen\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm case\">\r\n              <canvas className=\"canvas\" ref={elem => this.canvas = elem} />\r\n            </div>\r\n          </div>\r\n          <div className=\"row h-25\">\r\n            <div className=\"col-sm d-flex justify-content-around align-items-center\">\r\n              <button type=\"button\" className=\"btn btn-primary btn-lg\" disabled={this.state.running || this.state.rendering} onClick={this.shuffleAction}>Shuffle</button>\r\n              <button type=\"button\" className=\"btn btn-primary btn-lg\" disabled={this.state.running || this.state.rendering} onClick={this.reverseAction}>Reverse</button>\r\n              <button type=\"button\" className=\"btn btn-primary btn-lg\" disabled={this.state.running || this.state.rendering} onClick={this.bubbleSortAction}>Bubble Sort</button>\r\n              <button type=\"button\" className=\"btn btn-primary btn-lg\" disabled={this.state.running || this.state.rendering} onClick={this.insertionSortAction}>Insertion Sort</button>\r\n              <button type=\"button\" className=\"btn btn-primary btn-lg\" disabled={this.state.running || this.state.rendering} onClick={this.mergeSortAction}>Merge Sort</button>\r\n              <button type=\"button\" className=\"btn btn-primary btn-lg\" disabled={this.state.running || this.state.rendering} onClick={this.quickSortAction}>Quick Sort</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}